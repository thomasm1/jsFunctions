{"version":3,"sources":["shared/csvJson.js"],"names":["baseUrl","dcClass","eth","btc","ltc","coinArr","i","dc","document","getElementById","innerHTML","render","data","d3","select","append","text","JSON","stringify","type","d","Date","Symbol","Open","Close","High","Low","csv","length"],"mappings":"AAAA;AACA;AAEA,IAAMA,OAAO,GAAG,OAAhB;AACA,IAAMC,OAAO,GAAG,cAAhB;AAEA,IAAMC,GAAG,GAAG,0BAAZ;AACA,IAAMC,GAAG,GAAG,0BAAZ;AACA,IAAMC,GAAG,GAAG,0BAAZ;AACA,IAAMC,OAAO,GAAG,CAACF,GAAD,EAAMD,GAAN,EAAWE,GAAX,CAAhB;;2BAESE;AAEP,MAAMC,EAAE,GAAG,aAAX;AACAC,EAAAA,QAAQ,CAACC,cAAT,CAAwBF,EAAE,GAAGD,CAA7B,EAAgCI,SAAhC,uBACOJ,CAAC,KAAG,CAAL,GAAS,SAAT,GAAqBA,CAAC,KAAG,CAAL,GAAQ,UAAR,GAAmB,UAD7C,gDAEcC,EAAE,GAAGD,CAFnB;;AAME,WAASK,MAAT,CAAgBC,IAAhB,EAAqB;AACnBC,IAAAA,EAAE,CAACC,MAAH,CAAUb,OAAO,GAACK,CAAlB,EACGS,MADH,CACU,KADV,EAEGC,IAFH,CAEQC,IAAI,CAACC,SAAL,CAAeN,IAAf,EAAqB,IAArB,EAA2B,CAA3B,IAAgC,GAFxC;AAGD;;AACD,WAASO,IAAT,CAAcC,CAAd,EAAgB;AACdA,IAAAA,CAAC,CAACC,IAAF,GAAS,CAACD,CAAC,CAACC,IAAZ;AACAD,IAAAA,CAAC,CAACE,MAAF,GAAY,CAACF,CAAC,CAACE,MAAf;AACAF,IAAAA,CAAC,CAACG,IAAF,GAAS,CAACH,CAAC,CAACG,IAAZ;AACAH,IAAAA,CAAC,CAACI,KAAF,GAAW,CAACJ,CAAC,CAACI,KAAd;AACAJ,IAAAA,CAAC,CAACK,IAAF,GAAU,CAACL,CAAC,CAACK,IAAb;AACAL,IAAAA,CAAC,CAACM,GAAF,GAAS,CAACN,CAAC,CAACM,GAAZ;AACA,WAAON,CAAP;AACD;;AACDP,EAAAA,EAAE,CAACc,GAAH,WAAU3B,OAAV,SAAoBK,OAAO,CAACC,CAAD,CAA3B,GAAkCa,IAAlC,EAAwCR,MAAxC;;;AAvBJ,KAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,OAAO,CAACuB,MAA5B,EAAoCtB,CAAC,EAArC,EAAyC;AAAA,QAAhCA,CAAgC;AAwBrC;AACE","file":"csvJson.d8e1b372.js","sourceRoot":"..","sourcesContent":["// d3 STACKS\r\n//console.log(\"%c D3 data convert csv->json: \", \"border:outset 3px silver;color:black; background-color:silver\");\r\n\r\nconst baseUrl = 'data/';\r\nconst dcClass = \".dataConvert\";\r\n\r\nconst eth = 'Coinbase_ETHUSD_2019.csv';\r\nconst btc = 'Coinbase_BTCUSD_2019.csv';\r\nconst ltc = 'Coinbase_LTCUSD_2019.csv';\r\nconst coinArr = [btc, eth, ltc];\r\n\r\nfor (let i = 0; i < coinArr.length; i++) {\r\n \r\n  const dc = 'dataConvert'; \r\n  document.getElementById(dc + i).innerHTML = `  \r\n  <h4>${(i===0)? 'Bitcoin': (i===1)?'Ethereum':'Litecoin'} Daily Prices</h4>\r\n  <div class=\"${dc + i}\">\r\n  </div>  \r\n  `; \r\n\r\n    function render(data){\r\n      d3.select(dcClass+i)\r\n        .append(\"pre\")\r\n        .text(JSON.stringify(data, null, 2) + ',');\r\n    }\r\n    function type(d){\r\n      d.Date = +d.Date;\r\n      d.Symbol  = +d.Symbol;\r\n      d.Open = +d.Open;\r\n      d.Close  = +d.Close;\r\n      d.High  = +d.High;\r\n      d.Low  = +d.Low;\r\n      return d;\r\n    }\r\n    d3.csv(`${baseUrl}${coinArr[i]}`, type, render); \r\n   }\r\n      /*\r\nfunction csv<object, string>(url: string, init: RequestInit, row: (rawRow: d3.DSVRowString<string>, index: number, columns: string[]) => object): Promise<d3.DSVParsedArray<object>> (+2 overloads)\r\nFetches the CSV file at the specified input URL and returns a promise of an array of objects representing the parsed rows.\r\nThe init object is passed along to the underlying call to fetch.\r\nThe specified row conversion function is used to map and filter row objects to a more-specific representation; see dsv.csvParse for details.\r\nThe first generic parameter describes the type of the object representation of a parsed row. \r\nThe second generic paremeter describes the column names as union of string literal types\r\n*/"]}