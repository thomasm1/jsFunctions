{"version":3,"sources":["dataStructures/dataBinaryTree.js"],"names":["console","log","Node","data","left","right","BST","root","node","searchTree","current","removeNode","tempNode","findMinHeight","findMaxHeight","traverseInOrder","result","push","Array","traversePreOrder","traversePostOrder","Q","length","shift","bst","add","isBalanced","inOrder","preOrder","postOrder","levelOrder"],"mappings":"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","file":"dataBinaryTree.41d008e3.js","sourceRoot":"..","sourcesContent":["// B-TREE SEARCH\r\nconsole.log(\"%c B-TREE SEARCH:\", \"color:white; background-color:black\");\r\nclass Node {\r\n    constructor(data, left = null, right = null) {\r\n        this.data = data;\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n}\r\n\r\nclass BST {\r\n    constructor() {\r\n        this.root = null;\r\n    }\r\n    add(data) {\r\n        const node = this.root;\r\n        if (node === null) {\r\n            this.root = new Node(data);\r\n            return;\r\n        } else {\r\n            const searchTree = function(node) {\r\n                if (data < node.data) {\r\n                    if (node.left === null) {\r\n                        node.left = new Node(data);\r\n                        return;\r\n                    } else if (node.left !== null) {\r\n                        return searchTree(node.left);\r\n                    }\r\n                } else if (data > node.data) {\r\n                    if (node.right === null) {\r\n                        node.right = new Node(data);\r\n                        return;\r\n                    } else if (node.right !== null) {\r\n                        return searchTree(node.right);\r\n                    }\r\n                } else {\r\n                    return null;\r\n                }\r\n            };\r\n            return searchTree(node);\r\n        }\r\n    }\r\n    findMin() {\r\n        let current = this.root;\r\n        while (current.left !== null) {\r\n            current = current.left;\r\n        }\r\n        return current.data;\r\n    }\r\n    findMax() {\r\n        let current = this.root;\r\n        while (current.right !== null) {\r\n            current = current.right;\r\n        }\r\n        return current.data;\r\n    }\r\n    find(data) {\r\n        let current = this.root;\r\n        while (current.data !== data) {\r\n            if (data < current.data) {\r\n                current = current.left;\r\n            } else {\r\n                current = current.right;\r\n            }\r\n            if (current === null) {\r\n                return null;\r\n            }\r\n        }\r\n        return current;\r\n    }\r\n    isPresent(data) {\r\n        let current = this.root;\r\n        while (current) {\r\n            if (data === current.data) {\r\n                return true;\r\n            }\r\n            if (data < current.data) {\r\n                current = current.left;\r\n            } else {\r\n                current = current.right;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    remove(data) {\r\n        const removeNode = function(node, data) {\r\n            if (node == null) {\r\n                return null;\r\n            }\r\n            if (data == node.data) {\r\n                // node has no children \r\n                if (node.left == null && node.right == null) {\r\n                    return null;\r\n                }\r\n                // node has no left child \r\n                if (node.left == null) {\r\n                    return node.right;\r\n                }\r\n                // node has no right child \r\n                if (node.right == null) {\r\n                    return node.left;\r\n                }\r\n                // node has two children \r\n                var tempNode = node.right;\r\n                while (tempNode.left !== null) {\r\n                    tempNode = tempNode.left;\r\n                }\r\n                node.data = tempNode.data;\r\n                node.right = removeNode(node.right, tempNode.data);\r\n                return node;\r\n            } else if (data < node.data) {\r\n                node.left = removeNode(node.left, data);\r\n                return node;\r\n            } else {\r\n                node.right = removeNode(node.right, data);\r\n                return node;\r\n            }\r\n        }\r\n        this.root = removeNode(this.root, data);\r\n    }\r\n    isBalanced() {\r\n        return (this.findMinHeight() >= this.findMaxHeight() - 1)\r\n    }\r\n    findMinHeight(node = this.root) {\r\n        if (node == null) {\r\n            return -1;\r\n        };\r\n        let left = this.findMinHeight(node.left);\r\n        let right = this.findMinHeight(node.right);\r\n        if (left < right) {\r\n            return left + 1;\r\n        } else {\r\n            return right + 1;\r\n        };\r\n    }\r\n    findMaxHeight(node = this.root) {\r\n        if (node == null) {\r\n            return -1;\r\n        };\r\n        let left = this.findMaxHeight(node.left);\r\n        let right = this.findMaxHeight(node.right);\r\n        if (left > right) {\r\n            return left + 1;\r\n        } else {\r\n            return right + 1;\r\n        };\r\n    }\r\n    inOrder() {\r\n        if (this.root == null) {\r\n            return null;\r\n        } else {\r\n            var result = new Array();\r\n\r\n            function traverseInOrder(node) {\r\n                node.left && traverseInOrder(node.left);\r\n                result.push(node.data);\r\n                node.right && traverseInOrder(node.right);\r\n            }\r\n            traverseInOrder(this.root);\r\n            return result;\r\n        };\r\n    }\r\n    preOrder() {\r\n        if (this.root == null) {\r\n            return null;\r\n        } else {\r\n            var result = new Array();\r\n\r\n            function traversePreOrder(node) {\r\n                result.push(node.data);\r\n                node.left && traversePreOrder(node.left);\r\n                node.right && traversePreOrder(node.right);\r\n            };\r\n            traversePreOrder(this.root);\r\n            return result;\r\n        };\r\n    }\r\n    postOrder() {\r\n        if (this.root == null) {\r\n            return null;\r\n        } else {\r\n            var result = new Array();\r\n\r\n            function traversePostOrder(node) {\r\n                node.left && traversePostOrder(node.left);\r\n                node.right && traversePostOrder(node.right);\r\n                result.push(node.data);\r\n            };\r\n            traversePostOrder(this.root);\r\n            return result;\r\n        }\r\n    }\r\n\r\n    levelOrder() {\r\n        let result = [];\r\n        let Q = [];\r\n        if (this.root != null) {\r\n            Q.push(this.root);\r\n            while (Q.length > 0) {\r\n                let node = Q.shift();\r\n                result.push(node.data);\r\n                if (node.left != null) {\r\n                    Q.push(node.left);\r\n                };\r\n                if (node.right != null) {\r\n                    Q.push(node.right);\r\n                };\r\n            };\r\n            return result;\r\n        } else {\r\n            return null;\r\n        };\r\n    };\r\n}\r\n\r\n\r\n\r\nconst bst = new BST();\r\n\r\nbst.add(9);\r\nbst.add(4);\r\nbst.add(17);\r\nbst.add(3);\r\nbst.add(6);\r\nbst.add(22);\r\nbst.add(5);\r\nbst.add(7);\r\nbst.add(20);\r\n\r\nconsole.log(bst.findMinHeight());\r\nconsole.log(bst.findMaxHeight());\r\nconsole.log(bst.isBalanced());\r\nbst.add(10);\r\nconsole.log(bst.findMinHeight());\r\nconsole.log(bst.findMaxHeight());\r\nconsole.log(bst.isBalanced());\r\nconsole.log('inOrder: ' + bst.inOrder());\r\nconsole.log('preOrder: ' + bst.preOrder());\r\nconsole.log('postOrder: ' + bst.postOrder());\r\n\r\nconsole.log('levelOrder: ' + bst.levelOrder());"]}