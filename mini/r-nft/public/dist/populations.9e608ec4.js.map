{"version":3,"sources":["dataVisuals/populations.js"],"names":["colorVariable","geoIDVariable","format","d3","tip","attr","offset","html","d","properties","name","direction","select","style","parentWidth","node","getBoundingClientRect","width","margin","top","right","bottom","left","height","color","scaleQuantile","range","svg","append","projection","geoRobinson","scale","rotate","translate","path","geoPath","call","queue","defer","json","tsv","await","ready","error","geography","data","forEach","Number","replace","colorVariableValueByID","features","id","numberOfClasses","length","ckmeansClusters","ss","ckmeans","map","ckmeansBreaks","min","console","log","domain","selectAll","enter","on","show","hide","datum","topojson","mesh","a","b"],"mappings":"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","file":"populations.9e608ec4.js","sourceRoot":"..","sourcesContent":["\t// configuration\r\n\t\t\tconst colorVariable = 'population';\r\n\t\t\tconst geoIDVariable = 'id';\r\n\t\t\tconst format = d3.format(',');\r\n\r\n\t\t\t// Set tooltips\r\n\t\t\tconst tip = d3.tip()\r\n\t\t\t\t.attr('class', 'd3-tip')\r\n\t\t\t\t.offset([-10, 0])\r\n\t\t\t\t.html(d => `<strong>Country: </strong><span class='details'>${d.properties.name}<br></span><strong>Population: </strong><span class='details'>${format(d[colorVariable])}</span>`);\r\n\r\n\t\t\ttip.direction(function (d) {\r\n\t\t\t\tif (d.properties.name === 'Antarctica') return 'n';\r\n\t\t\t\t// Americas\r\n\t\t\t\tif (d.properties.name === 'Greenland') return 's';\r\n\t\t\t\tif (d.properties.name === 'Canada') return 'e';\r\n\t\t\t\tif (d.properties.name === 'USA') return 'e';\r\n\t\t\t\tif (d.properties.name === 'Mexico') return 'e';\r\n\t\t\t\t// Europe\r\n\t\t\t\tif (d.properties.name === 'Iceland') return 's';\r\n\t\t\t\tif (d.properties.name === 'Norway') return 's';\r\n\t\t\t\tif (d.properties.name === 'Sweden') return 's';\r\n\t\t\t\tif (d.properties.name === 'Finland') return 's';\r\n\t\t\t\tif (d.properties.name === 'Russia') return 'w';\r\n\t\t\t\t// Asia\r\n\t\t\t\tif (d.properties.name === 'China') return 'w';\r\n\t\t\t\tif (d.properties.name === 'Japan') return 's';\r\n\t\t\t\t// Oceania\r\n\t\t\t\tif (d.properties.name === 'Indonesia') return 'w';\r\n\t\t\t\tif (d.properties.name === 'Papua New Guinea') return 'w';\r\n\t\t\t\tif (d.properties.name === 'Australia') return 'w';\r\n\t\t\t\tif (d.properties.name === 'New Zealand') return 'w';\r\n\t\t\t\t// otherwise if not specified\r\n\t\t\t\treturn 'n';\r\n\t\t\t})\r\n\r\n\t\t\ttip.offset(function (d) { // [top, left]\r\n\t\t\t\tif (d.properties.name === 'Antarctica') return [0, 0];\r\n\t\t\t\t// Americas\r\n\t\t\t\tif (d.properties.name === 'Greenland') return [10, -10];\r\n\t\t\t\tif (d.properties.name === 'Canada') return [24, -28];\r\n\t\t\t\tif (d.properties.name === 'USA') return [-5, 8];\r\n\t\t\t\tif (d.properties.name === 'Mexico') return [12, 10];\r\n\t\t\t\tif (d.properties.name === 'Chile') return [0, -15];\r\n\t\t\t\t// Europe\r\n\t\t\t\tif (d.properties.name === 'Iceland') return [15, 0];\r\n\t\t\t\tif (d.properties.name === 'Norway') return [10, -28];\r\n\t\t\t\tif (d.properties.name === 'Sweden') return [10, -8];\r\n\t\t\t\tif (d.properties.name === 'Finland') return [10, 0];\r\n\t\t\t\tif (d.properties.name === 'France') return [-9, 66];\r\n\t\t\t\tif (d.properties.name === 'Italy') return [-8, -6];\r\n\t\t\t\tif (d.properties.name === 'Russia') return [5, 385];\r\n\t\t\t\t// Africa\r\n\t\t\t\tif (d.properties.name === 'Madagascar') return [-10, 10];\r\n\t\t\t\t// Asia\r\n\t\t\t\tif (d.properties.name === 'China') return [-16, -8];\r\n\t\t\t\tif (d.properties.name === 'Mongolia') return [-5, 0];\r\n\t\t\t\tif (d.properties.name === 'Pakistan') return [-10, 13];\r\n\t\t\t\tif (d.properties.name === 'India') return [-11, -18];\r\n\t\t\t\tif (d.properties.name === 'Nepal') return [-8, 1];\r\n\t\t\t\tif (d.properties.name === 'Myanmar') return [-12, 0];\r\n\t\t\t\tif (d.properties.name === 'Laos') return [-12, -8];\r\n\t\t\t\tif (d.properties.name === 'Vietnam') return [-12, -4];\r\n\t\t\t\tif (d.properties.name === 'Japan') return [5, 5];\r\n\t\t\t\t// Oceania\r\n\t\t\t\tif (d.properties.name === 'Indonesia') return [0, -5];\r\n\t\t\t\tif (d.properties.name === 'Papua New Guinea') return [-5, -10];\r\n\t\t\t\tif (d.properties.name === 'Australia') return [-15, 0];\r\n\t\t\t\tif (d.properties.name === 'New Zealand') return [-15, 0];\r\n\t\t\t\t// otherwise if not specified\r\n\t\t\t\treturn [-10, 0];\r\n\t\t\t})\r\n\r\n\t\t\td3.select('#ckmeans')\r\n\t\t\t\t.style('overflow', 'hidden');\r\n\r\n\t\t\tconst parentWidth = d3.select('#ckmeans').node().getBoundingClientRect().width;\r\n\t\t\tconst margin = { top: 0, right: 0, bottom: 0, left: 0 };\r\n\t\t\tconst width = 960 - margin.left - margin.right;\r\n\t\t\tconst height = 500 - margin.top - margin.bottom;\r\n\r\n\t\t\tconst color = d3.scaleQuantile()\r\n\t\t\t\t.range([\r\n\t\t\t\t\t'rgb(247,251,255)',\r\n\t\t\t\t\t'rgb(222,235,247)',\r\n\t\t\t\t\t'rgb(198,219,239)',\r\n\t\t\t\t\t'rgb(158,202,225)',\r\n\t\t\t\t\t'rgb(107,174,214)',\r\n\t\t\t\t\t'rgb(66,146,198)',\r\n\t\t\t\t\t'rgb(33,113,181)',\r\n\t\t\t\t\t'rgb(8,81,156)',\r\n\t\t\t\t\t'rgb(8,48,107)',\r\n\t\t\t\t\t'rgb(3,19,43)'\r\n\t\t\t\t]);\r\n\r\n\r\n\t\t\tconst svg = d3.select('#ckmeans')\r\n\t\t\t\t.append('svg')\r\n\t\t\t\t.attr('width', width)\r\n\t\t\t\t.attr('height', height)\r\n\t\t\t\t.append('g')\r\n\t\t\t\t.attr('class', 'map');\r\n\r\n\t\t\tconst projection = d3.geoRobinson()\r\n\t\t\t\t.scale(135)\r\n\t\t\t\t.rotate([359, 0, 0])\r\n\t\t\t\t.translate([width / 2.7, height / 1.7]);\r\n\r\n\t\t\tconst path = d3.geoPath().projection(projection);\r\n\r\n\t\t\tsvg.call(tip);\r\n\r\n\t\t\tqueue()\r\n\t\t\t\t.defer(d3.json, 'world_countries.json')\r\n\t\t\t\t.defer(d3.tsv, 'world_population.tsv')\r\n\t\t\t\t.await(ready);\r\n\r\n\t\t\tfunction ready(error, geography, data) {\r\n\t\t\t\tdata.forEach(d => {\r\n\t\t\t\t\td[colorVariable] = Number(d[colorVariable].replace(',', ''));\r\n\t\t\t\t})\r\n\r\n\t\t\t\tconst colorVariableValueByID = {};\r\n\r\n\t\t\t\tdata.forEach(d => { colorVariableValueByID[d[geoIDVariable]] = d[colorVariable]; });\r\n\t\t\t\tgeography.features.forEach(d => { d[colorVariable] = colorVariableValueByID[d.id] });\r\n\r\n\t\t\t\t// calculate ckmeans clusters\r\n\t\t\t\t// then use the max value of each cluster\r\n\t\t\t\t// as a break\r\n\t\t\t\tconst numberOfClasses = color.range().length - 1;\r\n\t\t\t\tconst ckmeansClusters = ss.ckmeans(data.map(d => d[colorVariable]), numberOfClasses);\r\n\t\t\t\tconst ckmeansBreaks = ckmeansClusters.map(d => d3.min(d));\r\n\t\t\t\tconsole.log('numberOfClasses', numberOfClasses);\r\n\t\t\t\tconsole.log('ckmeansClusters', ckmeansClusters);\r\n\t\t\t\tconsole.log('ckmeansBreaks', ckmeansBreaks);\r\n\r\n\t\t\t\t// set the domain of the color scale based on our data\r\n\t\t\t\tcolor\r\n\t\t\t\t\t.domain(ckmeansBreaks);\r\n\t\t\t\t//\r\n\t\t\t\t// .domain(jenksNaturalBreaks)\r\n\t\t\t\t//\r\n\t\t\t\t// .domain(d3.extent(data, d => d[colorVariable]));\r\n\t\t\t\t//\r\n\t\t\t\t// .domain([\r\n\t\t\t\t//   10000,\r\n\t\t\t\t//   100000,\r\n\t\t\t\t//   500000,\r\n\t\t\t\t//   1000000,\r\n\t\t\t\t//   5000000,\r\n\t\t\t\t//   10000000,\r\n\t\t\t\t//   50000000,\r\n\t\t\t\t//   100000000,\r\n\t\t\t\t//   500000000,\r\n\t\t\t\t//   1500000000\r\n\t\t\t\t// ]);\r\n\r\n\t\t\t\tsvg.append('g')\r\n\t\t\t\t\t.attr('class', 'countries')\r\n\t\t\t\t\t.selectAll('path')\r\n\t\t\t\t\t.data(geography.features)\r\n\t\t\t\t\t.enter().append('path')\r\n\t\t\t\t\t.attr('d', path)\r\n\t\t\t\t\t.style('fill', d => {\r\n\t\t\t\t\t\tif (typeof colorVariableValueByID[d.id] !== 'undefined') {\r\n\t\t\t\t\t\t\treturn color(colorVariableValueByID[d.id])\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn 'white'\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.style('fill-opacity', 0.8)\r\n\t\t\t\t\t.style('stroke', d => {\r\n\t\t\t\t\t\tif (d[colorVariable] !== 0) {\r\n\t\t\t\t\t\t\treturn 'white';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn 'lightgray';\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.style('stroke-width', 1)\r\n\t\t\t\t\t.style('stroke-opacity', 0.5)\r\n\t\t\t\t\t// tooltips\r\n\t\t\t\t\t.on('mouseover', function (d) {\r\n\t\t\t\t\t\ttip.show(d);\r\n\t\t\t\t\t\td3.select(this)\r\n\t\t\t\t\t\t\t.style('fill-opacity', 1)\r\n\t\t\t\t\t\t\t.style('stroke-opacity', 1)\r\n\t\t\t\t\t\t\t.style('stroke-width', 2)\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.on('mouseout', function (d) {\r\n\t\t\t\t\t\ttip.hide(d);\r\n\t\t\t\t\t\td3.select(this)\r\n\t\t\t\t\t\t\t.style('fill-opacity', 0.8)\r\n\t\t\t\t\t\t\t.style('stroke-opacity', 0.5)\r\n\t\t\t\t\t\t\t.style('stroke-width', 1)\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\tsvg.append('path')\r\n\t\t\t\t\t.datum(topojson.mesh(geography.features, (a, b) => a.id !== b.id))\r\n\t\t\t\t\t.attr('class', 'names')\r\n\t\t\t\t\t.attr('d', path);\r\n\t\t\t}"]}