{"version":3,"sources":["dataStructures/dataGraphs.js"],"names":["console","log","breadthSearch","graph","root","nodesLength","i","length","Infinity","queue","current","shift","curConnected","neighborIdx","idx","indexOf","push","j","newBreadthGraph","undirectedGraph","NodeA","NodeB","NodeC","NodeD","undirectedGraphArray","adjacencyMatrix","incidenceMatrixDir"],"mappings":"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","file":"dataGraphs.65c4b9b3.js","sourceRoot":"..","sourcesContent":["// Undirected & Directed Braphs\r\n// Breadth-first Search\r\nconsole.log(\r\n    \"%c GRAPHS, Breadth-First Search: \",\r\n    \"color:white; background-color:darkblue\"\r\n  );\r\n  function breadthSearch(graph, root) {\r\n    var nodesLength = {};\r\n    for (var i = 0; i < graph.length; i++) {\r\n      nodesLength[i] = Infinity;\r\n    }\r\n    nodesLength[root] = 0;\r\n  \r\n    var queue = [root];\r\n    var current;\r\n  \r\n    while (queue.length !== 0) {\r\n      current = queue.shift();\r\n  \r\n      var curConnected = graph[current];\r\n      var neighborIdx = [];\r\n      var idx = curConnected.indexOf(1);\r\n      while (idx !== -1) {\r\n        neighborIdx.push(idx);\r\n        idx = curConnected.indexOf(1, idx + 1);\r\n      }\r\n      for (var j = 0; j < neighborIdx.length; j++) {\r\n        if (nodesLength[neighborIdx[j]] === Infinity) {\r\n          nodesLength[neighborIdx[j]] = nodesLength[current] + 1;\r\n          queue.push(neighborIdx[j]);\r\n        }\r\n      }\r\n    }\r\n    return nodesLength;\r\n  }\r\n  var newBreadthGraph = [\r\n    [0, 1, 1, 1, 0],\r\n    [0, 0, 1, 0, 0],\r\n    [1, 1, 0, 0, 0],\r\n    [0, 0, 0, 1, 0],\r\n    [0, 1, 0, 0, 0]\r\n  ];\r\n  console.log(breadthSearch(newBreadthGraph, 1));\r\n  // Undirected & Directed Braphs\r\n  console.log(\r\n    \"%c GRAPHS, Adjacency Lists: \",\r\n    \"color:white; background-color:darkblue\"\r\n  );\r\n  console.log(\r\n    \"%c Undirected Graph: \",\r\n    \"color:darkblue; background-color:aliceblue\"\r\n  );\r\n  // Adjacency List\r\n  var undirectedGraph = {\r\n    NodeA: [\"NodeB\"],\r\n    NodeB: [\"NodeA\", \"NodeC\"],\r\n    NodeC: [\"NodeB\"],\r\n    NodeD: [\"NodeA\", \"NodeC\", \"NodeD\"]\r\n  };\r\n  console.log(\r\n    \"NodeA\",\r\n    undirectedGraph.NodeA,\r\n    \"NodeB: \",\r\n    undirectedGraph.NodeB,\r\n    \"NodeC\",\r\n    undirectedGraph.NodeC,\r\n    \"NodeD\",\r\n    undirectedGraph.NodeD\r\n  );\r\n  console.log(\r\n    \"%c Undirected Graph Arr:\",\r\n    \"color:darkblue; background-color:aliceblue\"\r\n  );\r\n  var undirectedGraphArray = {\r\n    NodeA: [1],\r\n    NodeB: [0, 2],\r\n    NodeC: [1],\r\n    NodeD: [0, 1, 2]\r\n  };\r\n  console.log(\r\n    \"NodeA\",\r\n    undirectedGraphArray.NodeA,\r\n    \"NodeB: \",\r\n    undirectedGraphArray.NodeB,\r\n    \"NodeC\",\r\n    undirectedGraphArray.NodeC,\r\n    \"NodeD\",\r\n    undirectedGraphArray.NodeD\r\n  );\r\n  \r\n  console.log(\r\n    \"%c Adjacency Matrix: \",\r\n    \"color:darkblue; background-color:aliceblue\"\r\n  );\r\n  var adjacencyMatrix = [[0, 1, 0], [1, 0, 1], [0, 1, 0]];\r\n  console.log(adjacencyMatrix);\r\n  \r\n  console.log(\r\n    \"%c Incidence Matrix: \",\r\n    \"color:darkblue; background-color:aliceblue\"\r\n  );\r\n  var incidenceMatrixDir = [\r\n    [1, 0, -1, 1],\r\n    [-1, 1, 0, 0],\r\n    [0, -1, 1, 0],\r\n    [0, 0, 0, -1]\r\n  ];\r\n  console.log(incidenceMatrixDir);\r\n  "]}