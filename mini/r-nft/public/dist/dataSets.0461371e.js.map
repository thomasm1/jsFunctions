{"version":3,"sources":["dataStructures/dataSets.js"],"names":["console","log","mySet","collection","has","element","indexOf","values","add","push","remove","index","splice","size","length","union","otherSet","unionSet","Set","firstSet","secondSet","forEach","e","intersection","intersectionSet","difference","differenceSet","subset","every","value","setA","setB"],"mappings":"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","file":"dataSets.0461371e.js","sourceRoot":"..","sourcesContent":["// SETS\r\nconsole.log(\"%c SETS BEGN: \", \"color:white; background-color:grey\");\r\n// ES6 Set methods:  .has, .values, .add,   .size,\r\nfunction mySet() {\r\n  // collection holding set\r\n  var collection = [];\r\n  // check for presence, return true or false\r\n  this.has = function(element) {\r\n    return collection.indexOf(element) !== -1;\r\n  };\r\n  //return all els in set\r\n  this.values = function() {\r\n    return collection;\r\n  };\r\n  //add el to a set\r\n  this.add = function(element) {\r\n    if (!this.has(element)) {\r\n      collection.push(element);\r\n      return true; // added\r\n    }\r\n    return false; // alread in set\r\n  };\r\n  //remove el from set\r\n  this.remove = function(element) {\r\n    if (this.has(element)) {\r\n      var index = collection.indexOf(element);\r\n      collection.splice(index, 1);\r\n      return true; // removed\r\n    }\r\n    return false; // none to remve\r\n  };\r\n  this.size = function() {\r\n    return collection.length; // col size\r\n  };\r\n  //  returns the union of two sets\r\n  this.union = function(otherSet) {\r\n    var unionSet = new Set();\r\n    var firstSet = this.values();\r\n    var secondSet = otherSet.values();\r\n    firstSet.forEach(function(e) {\r\n      unionSet.add(e);\r\n    });\r\n    secondSet.forEach(function(e) {\r\n      unionSet.add(e);\r\n    });\r\n    return unionSet;\r\n  };\r\n  // returns intersection of 2 sets AS A NEW SET\r\n  this.intersection = function(otherSet) {\r\n    var intersectionSet = new mySet();\r\n    var firstSet = this.values();\r\n    firstSet.forEach(function(e) {\r\n      if (otherSet.has(e)) {\r\n        intersectionSet.add(e);\r\n      }\r\n    });\r\n    return intersectionSet;\r\n  };\r\n  // returns DIFFERENCE of 2 sets as a new set\r\n  this.difference = function(otherSet) {\r\n    var differenceSet = new Set();\r\n    var firstSet = this.values();\r\n    firstSet.forEach(function(e) {\r\n      if (!otherSet.has(e)) {\r\n        differenceSet.add(e);\r\n      }\r\n    });\r\n    return differenceSet;\r\n  };\r\n  // tests if set is a subset of a different set\r\n  this.subset = function(otherSet) {\r\n    var firstSet = this.values();\r\n    return firstSet.every(function(value) {\r\n      return otherSet.has(value);\r\n    });\r\n  };\r\n}\r\nvar setA = new mySet();\r\nvar setB = new mySet();\r\n\r\nsetA.add(\"a\");\r\nsetB.add(\"b\");\r\nsetB.add(\"c\");\r\nsetB.add(\"a\");\r\nsetB.add(\"d\");\r\nconsole.log(setA.subset(setB));\r\nconsole.log(setA.intersection(setB).values());\r\nconsole.log(setB.difference(setA).values());\r\n\r\nconsole.log(setB.values());\r\nsetB.remove(\"a\");\r\nconsole.log(setB.has(\"a\"));\r\nconsole.log(setB.add(\"d\"));\r\n"]}