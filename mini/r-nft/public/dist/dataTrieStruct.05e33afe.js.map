{"version":3,"sources":["dataStructures/dataTrieStruct.js"],"names":["console","log","NodeTrie","keys","Map","end","setEnd","isEnd","Trie","root","add","input","node","length","has","set","substr","get","isWord","word","print","words","Array","search","string","size","letter","concat","push","undefined","String","newTrie"],"mappings":"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","file":"dataTrieStruct.05e33afe.js","sourceRoot":"..","sourcesContent":["// d3 TRIE - associative data structures\r\nconsole.log(\"%c   TRIE BEGIN: \", \"color:white; background-color:purple\");\r\n\r\nlet NodeTrie = function() {\r\n  this.keys = new Map();\r\n  this.end = false;\r\n  this.setEnd = function() {\r\n    this.end = true;\r\n  };\r\n  this.isEnd = function() {\r\n    return this.end;\r\n  };\r\n};\r\n\r\nlet Trie = function() {\r\n  this.root = new NodeTrie();\r\n  this.add = function(input, node = this.root) {\r\n    if (input.length == 0) { // If no input,use this.root for node\r\n      node.setEnd();\r\n      return;\r\n    } else if (!node.keys.has(input[0])) { // input.len > 0, there are more letters, but NOT YET AT END OF WORD\r\n      node.keys.set(input[0], new NodeTrie());// so start input[0] as first letter. \r\n      return this.add(input.substr(1), node.keys.get(input[0])); // every letter after the first letter, pass in NODE JUST CREATED (node with letter 'B's)\r\n    } else {\r\n      return this.add(input.substr(1), node.keys.get(input[0])); // (for another word of same letter 'B') every letter after first letter, onto EXISTING NODE\r\n    }\r\n  };\r\n  this.isWord = function(word) {// checking if whole word in.. (doesn't check every word, only 1st letter )\r\n    let node = this.root;\r\n    while (word.length > 1) {\r\n      if (!node.keys.has(word[0])) {\r\n        return false;\r\n      } else {\r\n        node = node.keys.get(word[0]);\r\n        word = word.substr(1);\r\n      }\r\n    }\r\n    return node.keys.has(word) && node.keys.get(word).isEnd() ? true : false;\r\n  };\r\n  this.print = function() { // helper fx:array of every word and searches \r\n    let words = new Array();\r\n    let search = function(node = this.root, string) {\r\n      if (node.keys.size != 0) {\r\n        for (let letter of node.keys.keys()) {\r\n          search(node.keys.get(letter), string.concat(letter));\r\n        }\r\n        if (node.isEnd()) {\r\n          words.push(string);\r\n        }\r\n      } else {\r\n        string.length > 0 ? words.push(string) : undefined;\r\n        return;\r\n      }\r\n    };\r\n    search(this.root, new String());\r\n    return words.length > 0 ? words : null;\r\n  };\r\n};\r\n\r\nlet newTrie = new Trie();\r\nnewTrie.add(\"Tom\");\r\nnewTrie.add(\"Thomas\");\r\nnewTrie.add(\"Tomtom\");\r\nnewTrie.add(\"Tom\");\r\nnewTrie.add(\"ThomasMilton\");\r\nnewTrie.add(\"ball\");\r\nnewTrie.add(\"bat\");\r\nnewTrie.add(\"sense\");\r\nnewTrie.add(\"donut\");\r\nnewTrie.add(\"doubleDown\");\r\nconsole.log(newTrie.isWord(\"Tom\"));\r\nconsole.log(newTrie.isWord(\"Thxyz\"));\r\nconsole.log(newTrie.isWord(\"TomXX\"));\r\nconsole.log(newTrie.isWord(\"ball\"));\r\nconsole.log(newTrie.print());\r\n"]}