{"version":3,"sources":["dataPerformance/bigO.js"],"names":["console","log","addingLoop","n","total","i","double","arr","newArr","length","push","addUpFastTo","time1","performance","now","time2","addUpSlowTo","t1","t2","totali","totalj","allPairsQuadraticTo","j","tt11","tt22","toPrecision","totalii","allPairsNotQuadraticTo","tt1","tt2"],"mappings":"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","file":"bigO.2d29df8b.js","sourceRoot":"..","sourcesContent":["\r\nconsole.log(\"%c big O Performance Timers\", \"color:white; background:red; :solid 1px blue\")\r\n\r\n// AUXILIARY SPACE COMPLEXITY: memory allocateD to run alg (not including input space)\r\n//  O(1) Constant   Primitive types (bool, num, undefined, null)\r\n//  O(n) Linear   String types\r\n//  O(n) Linear   Complex/Reference types (Array.length, Object.key.)\r\n\r\n//  O(1) Space - number loop\r\nfunction addingLoop(n) {\r\n    let total = 0;\r\n    for (let i = 1; i <= n; i++) {\r\n      total += i;\r\n    }\r\n    return total;\r\n  }\r\n  \r\n  // O(n) Space - array doubling\r\n  function double(arr) {\r\n    let newArr = [];\r\n    for (let i = 0; i < arr.length; i++) {\r\n      newArr.push(2 * arr[i]);\r\n    }\r\n    return newArr;\r\n  }\r\n  \r\n  // TIME COMPLEXITY- runtime\r\n  // O(1)       Constant=== (f(n = 1))\r\n  // O(log n)   Almost like Constant Log4 or log100 === (f(Log(n))\r\n  // O(n)       Linear=== (f(n) = n)\r\n  // O(nlog n)\r\n  // O(n^2)     Quadratic=== (f(n) = n2)\r\n  \r\n  //  O(1)\r\n  function addUpFastTo(n) {\r\n    return (n * (n + 1)) / 2;\r\n  }\r\n  var time1 = performance.now();\r\n  addUpFastTo(100000000);\r\n  var time2 = performance.now();\r\n  console.log(`FastTime O(1): ${(time2 - time1) / 1000} seconds.`);\r\n  \r\n  ///  O(n)\r\n  function addUpSlowTo(n) {\r\n    let total = 0;\r\n    for (let i = 1; i <= n; i++) {\r\n      total += i;\r\n    }\r\n    return total;\r\n  }\r\n  var t1 = performance.now();\r\n  addUpSlowTo(100000000);\r\n  var t2 = performance.now();\r\n  console.log(`SlowTime O(n): ${(t2 - t1) / 1000} seconds.`);\r\n  \r\n  /// Quad  O(n^2)\r\n  var totali, totalj;\r\n  function allPairsQuadraticTo(n) {\r\n    for (var i = 0; i < n; i++) {\r\n      totali += i;\r\n      for (var j = 0; j < n; j++) {\r\n        totalj += j;\r\n      }\r\n      return totalj;\r\n    }\r\n    return totali;\r\n  }\r\n  var tt11 = performance.now();\r\n  allPairsQuadraticTo(1000);\r\n  var tt22 = performance.now();\r\n  console.log(`Quad O(n^2): ${((tt22 - tt11) / 1000).toPrecision(12)} seconds.`);\r\n  \r\n  //notQuad O(n)\r\n  var totalii;\r\n  function allPairsNotQuadraticTo(n) {\r\n    for (var i = 0; i < n; i++) {\r\n      totalii += i;\r\n    }\r\n    return totalii;\r\n  }\r\n  var tt1 = performance.now();\r\n  allPairsNotQuadraticTo(1000);\r\n  var tt2 = performance.now();\r\n  console.log(`notQuad O(n): ${((tt2 - tt1) / 1000).toPrecision(12)} seconds.`);\r\n  \r\n  // LOGS:  Binary logarithm of a number is # of times you can divide by 2 before reaching <1.\r\n  // log2(8) === 3  .... 8/2 = 4, 4/2 = 2, 2/2 = 1 === binary log is 3.\r\n  // Log base2 of (value) equals exponent\r\n  // Log base2 of 8 equals 3 .... 2(exp) = value\r\n  // So, Log2 or Log4, or log100 === O(Log(n))\r\n  //\r\n  // searching algs often have logarithmic time complexity\r\n  // sortings algs often involve logs\r\n  // recursion often has logarithmic space complexity\r\n  "]}