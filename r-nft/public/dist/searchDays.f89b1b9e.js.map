{"version":3,"sources":["dataCalculators/searchDays.js"],"names":["binarySearch","array","val","found","min","max","length","middle","i","console","log","dailyProfit","dailyIntProfit","dailyProfitFull","fetchSortedBitcoin2019","fetch","bitcoinPromise","json","bitcoin2019","Close","Open","Math","floor","push","dailySorted","sort","a","b","dailyLargest","reverse","awaitSearch","update"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,YAAT,CAAsBC,KAAtB,EAA6BC,GAA7B,EAAkC;AAC9B,MAAIC,KAAK,GAAG,IAAZ;AACA,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,GAAG,GAAGJ,KAAK,CAACK,MAAhB;AACA,MAAIC,MAAM,GAAG,CAACF,GAAG,GAAGD,GAAP,IAAc,CAA3B;;AACA,OAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,KAAK,CAACK,MAA1B,EAAkCE,CAAC,EAAnC,EAAuC;AACnC,QAAIP,KAAK,CAACO,CAAD,CAAL,GAAWN,GAAf,EAAoB;AAChBG,MAAAA,GAAG,GAAGE,MAAN;AACH,KAFD,MAEO,IAAIN,KAAK,CAACO,CAAD,CAAL,GAAWN,GAAf,EAAoB;AACvBE,MAAAA,GAAG,GAAGG,MAAN;AACH,KAFM,MAEA,IAAIN,KAAK,CAACO,CAAD,CAAL,KAAaN,GAAjB,EAAsB;AACzBC,MAAAA,KAAK,GAAGD,GAAR;AACAO,MAAAA,OAAO,CAACC,GAAR,4BAAgCP,KAAhC,0BAAqDK,CAArD,6BAAyEP,KAAK,CAACK,MAA/E;AACA,aAAOH,KAAP;AACH,KAJM,MAIA;AACH,aAAOM,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAP;AACH;AACJ;AACJ,EAGD;AACA;;;AACA,IAAIC,WAAW,GAAG,EAAlB;AACA,IAAIC,cAAc,GAAG,EAArB;AACA,IAAIC,eAAe,GAAG,EAAtB;;AACA,SAAeC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAEiCC,KAAK,EAC9B;AACA,wEAF8B,CAFtC;;AAAA;AAEUC,UAAAA,cAFV;AAAA;AAAA,0CAO8BA,cAAc,CAACC,IAAf,EAP9B;;AAAA;AAOUC,UAAAA,WAPV;;AAQI;AACA,eAASV,CAAT,GAAa,CAAb,EAAgBA,CAAC,GAAGU,WAAW,CAACZ,MAAhC,EAAwCE,CAAC,EAAzC,EAA6C;AACzCG,YAAAA,WAAW,CAACH,CAAD,CAAX,GAAiBU,WAAW,CAACV,CAAD,CAAX,CAAeW,KAAf,GAAuBD,WAAW,CAACV,CAAD,CAAX,CAAeY,IAAvD,CADyC,CACoB;;AAC7DR,YAAAA,cAAc,CAACJ,CAAD,CAAd,GAAoBa,IAAI,CAACC,KAAL,CAAWX,WAAW,CAACH,CAAD,CAAtB,CAApB;AACAK,YAAAA,eAAe,CAACU,IAAhB,CAAqBX,cAAc,CAACJ,CAAD,CAAnC;AACH;;AACDgB,UAAAA,WAAW,GAAGX,eAAe,CAACY,IAAhB,CAAqB,UAACC,CAAD,EAAIC,CAAJ;AAAA,mBAAUD,CAAC,GAAGC,CAAd;AAAA,WAArB,CAAd;AACAC,UAAAA,YAAY,GAAGJ,WAAW,CAACK,OAAZ,EAAf;AACApB,UAAAA,OAAO,CAACC,GAAR,CAAY,iDAAZ,EAA+D,yDAA/D;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCkB,YAAtC;AAjBJ,2CAkBWA,YAlBX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoBA;AAEA;AACA;;;AACA,IAAME,WAAW,GAAG,SAAdA,WAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAEKhB,sBAAsB,EAF3B;;AAAA;AAEViB,UAAAA,MAFU;AAIhB/B,UAAAA,YAAY,CAAC+B,MAAD,EAAS,GAAT,CAAZ;;AAJgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB;;AAMAD,WAAW,IAEX","file":"searchDays.f89b1b9e.js","sourceRoot":"..","sourcesContent":["// console.log(\"%c Search Daily Bitcoin Profits: \", \"color:blue; background:aliceblue; border:solid 1px blue\")\r\n////////////////////////////////////////////////////\r\n// Binary Search\r\nfunction binarySearch(array, val) {\r\n    let found = null;\r\n    let min = 0;\r\n    let max = array.length;\r\n    let middle = (max + min) / 2;\r\n    for (let i = 0; i < array.length; i++) {\r\n        if (array[i] < val) {\r\n            max = middle;\r\n        } else if (array[i] > val) {\r\n            min = middle;\r\n        } else if (array[i] === val) {\r\n            found = val;\r\n            console.log(`found it, profit ${found} is at index ${i} in array size: ${array.length}`);\r\n            return found;\r\n        } else {\r\n            return console.log(\"not found!\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Fetch Data\r\n// Sort largest profit to smallest profit (negative)\r\nlet dailyProfit = [];\r\nlet dailyIntProfit = [];\r\nlet dailyProfitFull = [];\r\nasync function fetchSortedBitcoin2019() {\r\n\r\n    const bitcoinPromise = await fetch(\r\n        // \"Coinbase_LTCUSD_2019.json\"\r\n        \"https://tmm-nov.s3.amazonaws.com/data/coins/BTCUSD_2019.json\"\r\n    );\r\n\r\n    const bitcoin2019 = await bitcoinPromise.json();\r\n    // console.log(\"Raw downloaded data \", bitcoin2019);\r\n    for (let i = 0; i < bitcoin2019.length; i++) {\r\n        dailyProfit[i] = bitcoin2019[i].Close - bitcoin2019[i].Open; // Day's gain/loss  \r\n        dailyIntProfit[i] = Math.floor(dailyProfit[i]);\r\n        dailyProfitFull.push(dailyIntProfit[i])\r\n    }\r\n    dailySorted = dailyProfitFull.sort((a, b) => a - b);\r\n    dailyLargest = dailySorted.reverse();\r\n    console.log(\"%c Calculations: Search Daily Bitcoin Profits: \", \"color:yellow; background:black; border:solid 1px orange\");\r\n    console.log(\"Integer Profits sorted\", dailyLargest)\r\n    return dailyLargest\r\n}\r\n// fetchSortedBitcoin2019();\r\n\r\n////////////////////////////////////////////////\r\n// Async to make ordered array, and search it\r\nconst awaitSearch = async function() {\r\n    // const update = await makeOrderedArr(orderedArray, 1000, 10);\r\n    const update = await fetchSortedBitcoin2019();\r\n\r\n    binarySearch(update, 145);\r\n};\r\nawaitSearch();\r\n\r\n////////////////////////////////////////////////"]}