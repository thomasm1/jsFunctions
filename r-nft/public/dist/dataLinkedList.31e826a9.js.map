{"version":3,"sources":["dataStructures/dataLinkedList.js"],"names":["console","log","LinkedList","length","head","Node","element","next","size","add","node","currentNode","remove","previousNode","isEmpty","indexOf","index","elementAt","count","addAt","currentIndex","removeAt","catKing"],"mappings":"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","file":"dataLinkedList.31e826a9.js","sourceRoot":"..","sourcesContent":["// LinkedList\r\nconsole.log(\"%c LINKED LIST: \", \"color:white; background-color:brown\");\r\n\r\nfunction LinkedList() {\r\n  var length = 0;\r\n  var head = null;\r\n\r\n  var Node = function(element) {\r\n    this.element = element;\r\n    this.next = null;\r\n  };\r\n  this.size = function() {\r\n    return length;\r\n  };\r\n  this.head = function() {\r\n    return head;\r\n  };\r\n  this.add = function(element) {\r\n    var node = new Node(element);\r\n    if (head === null) {\r\n      head = node;\r\n    } else {\r\n      var currentNode = head;\r\n      while (currentNode.next) {\r\n        currentNode = currentNode.next;\r\n      }\r\n      currentNode.next = node;\r\n    }\r\n    length++;\r\n  };\r\n  this.remove = function(element) {\r\n    var currentNode = head;\r\n    var previousNode;\r\n    if (currentNode.element === element) {\r\n      head = currentNode.next;\r\n    } else {\r\n      while (currentNode.element !== element) {\r\n        previousNode = currentNode;\r\n        currentNode = currentNode.next;\r\n      }\r\n      previousNode.next = currentNode.next;\r\n    }\r\n    length--;\r\n  };\r\n  this.isEmpty = function() {\r\n    return length === 0;\r\n  };\r\n  this.indexOf = function(element) {\r\n    var currentNode = head;\r\n    var index = -1;\r\n    while (currentNode) {\r\n      index++;\r\n      if (currentNode.element === element) {\r\n        return index;\r\n      }\r\n      currentNode = currentNode.next;\r\n    }\r\n    return -1;\r\n  };\r\n  this.elementAt = function(index) {\r\n    var currentNode = head;\r\n    var count = 0;\r\n    while (count < index) {\r\n      count++;\r\n      currentNode = currentNode.next;\r\n    }\r\n    return currentNode.element;\r\n  };\r\n  this.addAt = function(index, element) {\r\n    var node = new Node(element);\r\n    var currentNode = head;\r\n    var previousNode;\r\n    var currentIndex = 0;\r\n\r\n    if (index > length) {\r\n      return false;\r\n    }\r\n    if (index === 0) {\r\n      node.next = currentNode;\r\n      head = node;\r\n    } else {\r\n      while (currentIndex < index) {\r\n        currentIndex++;\r\n        previousNode = currentNode;\r\n        currentNode = currentNode.next;\r\n      }\r\n      node.next = currentNode;\r\n      previousNode.next = node;\r\n    }\r\n    length++;\r\n  };\r\n  this.removeAt = function(index) {\r\n    var currentNode = head;\r\n    var previousNode;\r\n    var currentIndex = 0;\r\n    if (index < 0 || index >= length) {\r\n      return null;\r\n    }\r\n    if (index === 0) {\r\n      head = currentNode.next;\r\n    } else {\r\n      while (currentIndex < index) {\r\n        currentIndex++;\r\n        previousNode = currentNode;\r\n        currentNode = currentNode.next;\r\n      }\r\n      previousNode.next = currentNode.next;\r\n    }\r\n    length--;\r\n    return currentNode.element;\r\n  };\r\n}\r\n\r\nvar catKing = new LinkedList();\r\ncatKing.add(\"Kitten\");\r\ncatKing.add(\"Katten\");\r\ncatKing.add(\"Tuna\");\r\ncatKing.add(\"riskyCatten\");\r\nconsole.log(catKing.size());\r\nconsole.log(catKing.removeAt(3));\r\nconsole.log(catKing.removeAt(3));\r\nconsole.log(catKing.size());\r\n"]}