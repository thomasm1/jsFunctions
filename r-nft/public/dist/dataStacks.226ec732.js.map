{"version":3,"sources":["dataStructures/dataStacks.js"],"names":["console","log","letters","word","reverse","i","length","push","pop","Stack","count","storage","value","undefined","result","size","peek","myStack","implementStack","stack"],"mappings":"AAAA;AACAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiC,qCAAjC;AAEA,IAAIC,OAAO,GAAG,EAAd;AACA,IAAIC,IAAI,GAAG,SAAX;AACA,IAAIC,OAAO,GAAG,EAAd;;AAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpCH,EAAAA,OAAO,CAACK,IAAR,CAAaJ,IAAI,CAACE,CAAD,CAAjB;AACD;;AACDL,OAAO,CAACC,GAAR,CAAYC,OAAZ;;AACA,KAAK,IAAIG,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGF,IAAI,CAACG,MAAzB,EAAiCD,EAAC,EAAlC,EAAsC;AACpCD,EAAAA,OAAO,IAAIF,OAAO,CAACM,GAAR,CAAYL,IAAI,CAACE,EAAD,CAAhB,CAAX;AACD;;AACDL,OAAO,CAACC,GAAR,CAAYG,OAAZ;;AACA,IAAIA,OAAO,KAAKD,IAAhB,EAAsB;AACpBH,EAAAA,OAAO,CAACC,GAAR,CAAYE,IAAZ,EAAkB,eAAlB;AACD,EACD;;;AAEA,IAAIM,KAAK,GAAG,SAARA,KAAQ,GAAW;AACrB,OAAKC,KAAL,GAAa,CAAb;AACA,OAAKC,OAAL,GAAe,EAAf,CAFqB,CAGrB;;AACA,OAAKJ,IAAL,GAAY,UAASK,KAAT,EAAgB;AAC1B,SAAKD,OAAL,CAAa,KAAKD,KAAlB,IAA2BE,KAA3B;AACA,SAAKF,KAAL;AACD,GAHD;;AAIA,OAAKF,GAAL,GAAW,YAAW;AACpB,QAAI,KAAKE,KAAL,KAAe,CAAnB,EAAsB;AACpB,aAAOG,SAAP;AACD;;AACD,SAAKH,KAAL;AACA,QAAII,MAAM,GAAG,KAAKH,OAAL,CAAa,KAAKD,KAAlB,CAAb;AACA,WAAO,KAAKC,OAAL,CAAa,KAAKD,KAAlB,CAAP;AACA,WAAOI,MAAP;AACD,GARD;;AASA,OAAKC,IAAL,GAAY,YAAW;AACrB,WAAO,KAAKL,KAAZ;AACD,GAFD;;AAGA,OAAKM,IAAL,GAAY,YAAW;AACrB,WAAO,KAAKL,OAAL,CAAa,KAAKD,KAAL,GAAa,CAA1B,CAAP;AACD,GAFD;AAGD,CAvBD;;AAyBA,IAAIO,OAAO,GAAG,IAAIR,KAAJ,EAAd;;AACA,IAAMS,cAAc,GAAG,SAAjBA,cAAiB,CAASC,KAAT,EAAgB;AACrCF,EAAAA,OAAO,CAACV,IAAR,CAAa,CAAb;AACAU,EAAAA,OAAO,CAACV,IAAR,CAAa,CAAb;AACAP,EAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA+C,WAA/C;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYgB,OAAO,CAACD,IAAR,EAAZ,EAA4BC,OAAO,CAACT,GAAR,EAA5B,EAA2CS,OAAO,CAACD,IAAR,EAA3C;AACAC,EAAAA,OAAO,CAACV,IAAR,CAAa,MAAb;AACAP,EAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6C,YAA7C;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYgB,OAAO,CAACD,IAAR,EAAZ,EAA4BC,OAAO,CAACT,GAAR,EAA5B,EAA2CS,OAAO,CAACD,IAAR,EAA3C;AACD,CARD;;AAUAE,cAAc,CAACD,OAAD,CAAd","file":"dataStacks.226ec732.js","sourceRoot":"..","sourcesContent":["// STACKS\r\nconsole.log(\"%c STACKS BEGIN: \", \"color:white; background-color:green\")\r\n\r\nlet letters = [];\r\nlet word = \"rotator\";\r\nlet reverse = \"\";\r\n\r\nfor (let i = 0; i < word.length; i++) {\r\n  letters.push(word[i]);\r\n}\r\nconsole.log(letters);\r\nfor (let i = 0; i < word.length; i++) {\r\n  reverse += letters.pop(word[i]);\r\n}\r\nconsole.log(reverse);\r\nif (reverse === word) {\r\n  console.log(word, \"is palindrome\");\r\n}\r\n///\r\n\r\nvar Stack = function() {\r\n  this.count = 0;\r\n  this.storage = {};\r\n  //\r\n  this.push = function(value) {\r\n    this.storage[this.count] = value;\r\n    this.count++;\r\n  };\r\n  this.pop = function() {\r\n    if (this.count === 0) {\r\n      return undefined;\r\n    }\r\n    this.count--;\r\n    var result = this.storage[this.count];\r\n    delete this.storage[this.count];\r\n    return result;\r\n  };\r\n  this.size = function() {\r\n    return this.count;\r\n  };\r\n  this.peek = function() {\r\n    return this.storage[this.count - 1];\r\n  };\r\n};\r\n\r\nvar myStack = new Stack();\r\nconst implementStack = function(stack) {\r\n  myStack.push(1);\r\n  myStack.push(2);\r\n  console.log(\"%c push(1),push(2)peek,pop,peek\", \"color:red\");\r\n  console.log(myStack.peek(), myStack.pop(), myStack.peek());\r\n  myStack.push(\"item\");\r\n  console.log(\"%c ..push(item) peek,pop,peek\", \"color:blue\");\r\n  console.log(myStack.peek(), myStack.pop(), myStack.peek());\r\n};\r\n\r\nimplementStack(myStack);\r\n"]}