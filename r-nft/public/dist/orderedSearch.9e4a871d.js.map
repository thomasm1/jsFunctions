{"version":3,"sources":["dataPerformance/arrays/orderedSearch.js"],"names":["console","log","binarySearch","array","val","found","min","max","length","middle","i","makeUnorderedArr","arr","desiredLen","nwArray","randomDigit","Math","floor","random","push","makeOrderedArr","start","asyncSearch","orderedArray","update","order","unorderedArray"],"mappings":"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","file":"orderedSearch.9e4a871d.js","sourceRoot":"..","sourcesContent":["console.log(\"%c Binary Search: \", \"color:black; background:aliceblue; border:solid 1px black\")\r\n\r\n////////////////////////////////////////////////////\r\n// Binary Search\r\nfunction binarySearch(array, val) {\r\n    let found = null;\r\n    let min = 0;\r\n    let max = array.length;\r\n    let middle = (max + min) / 2;\r\n    for (let i = 0; i < array.length; i++) {\r\n        if (array[i] < val) {\r\n            max = middle;\r\n        } else if (array[i] > val) {\r\n            min = middle;\r\n        } else if (array[i] === val) {\r\n            found = val;\r\n            console.log(`found it, ${found} is at index ${i} in array size: ${array.length}`);\r\n            return found;\r\n        } else {\r\n            return console.log(\"not found!\");\r\n        }\r\n    }\r\n}\r\n////////////////////////////////////////////////\r\n// Make Unorderd Array, \r\nfunction makeUnorderedArr(arr, desiredLen) {\r\n    arr = arr || [1, 2, 3]\r\n    desiredLen = desiredLen || 100;\r\n    const nwArray = arr;\r\n\r\n    for (let i = 0; i < desiredLen; i++) {\r\n        let randomDigit = Math.floor(desiredLen * Math.random());\r\n        nwArray.push(randomDigit);\r\n    }\r\n    console.log(`Made random Array of  length: ${desiredLen}  ..starting with ${nwArray[0]}`)\r\n    return nwArray;\r\n}\r\n////////////////////////////////////////////////\r\n// Make Ordered Array\r\nfunction makeOrderedArr(arr, desiredLen, start) {\r\n    const nwArray = arr;\r\n    for (let i = start; i <= desiredLen; i++) {\r\n        nwArray.push(i);\r\n    }\r\n    console.log(`Made Ordered Array length: ${nwArray.length} ..starting with ${start}`)\r\n    return nwArray;\r\n}\r\n\r\n////////////////////////////////////////////////\r\n// Async to make ordered array, and search it\r\nconst asyncSearch = async function() {\r\n    const orderedArray = [];\r\n    const update = await makeOrderedArr(orderedArray, 1000, 10);\r\n    console.log('Async Call makeOrderedArr() & binarySearch()')\r\n\r\n    binarySearch(update, 777);\r\n};\r\nasyncSearch();\r\n\r\n////////////////////////////////////////////////\r\n// Manual provide array, and search it\r\nconst order = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22];\r\nbinarySearch(order, 18);\r\n\r\nconst unorderedArray = [];\r\n//parameters = (arr, desiredLen)\r\nmakeUnorderedArr(unorderedArray, 1000);\r\n\r\nconst orderedArray = [];\r\n//parameters = (arr, desiredLen, start)\r\nmakeOrderedArr(orderedArray, 1000, 1);"]}