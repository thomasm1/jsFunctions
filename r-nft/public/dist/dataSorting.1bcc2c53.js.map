{"version":3,"sources":["dataStructures/dataSorting.js"],"names":["console","log","selectionSort","arr","swap","idx1","idx2","i","length","currentMin","j","selectionSort2","arrSize","temp","yourArray","arraySelectionSort","newSelectionSort","newSelectionSort2","insertionSort","currentVal","arrayInsertionSort","newInsertionSort","bubbleSort","arrayUnsorted","newBubbleSort","bubbleSortOptimize","noSwaps","arrayUnsorted2"],"mappings":"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","file":"dataSorting.1bcc2c53.js","sourceRoot":"..","sourcesContent":["// SORTING\r\nconsole.log(\"%c SORTING: \", \"color:black; background-color:yellow;border:solid 1px black\");\r\n\r\n// Best asymptotic run-time complexity:\r\n//        O(n):  Heap, Insertion  \r\n// average case best:\r\n//        O(nlogn):   Merge Sort, Quick Sort, Heap Sort. \r\n// The worst case best:\r\n//        O(nlogn):   Merge Sort and Heap Sort.\r\n \r\n\r\n// SELECTION -- O(n^2)\r\n// pretty lousy performance, but ... can be good at checking if everything is already sorted. \r\n// -- also good to use when memory space is limited. \r\n/* current item moves through the array and decides if the itâ€™s smaller than the current minimum. If it is, the current item gets the new marker as the new current minimum.... right until the end of the array and the marked smallest item will get swapped with the value on the left-hand side. This value becomes partitioned.  and again ... */\r\nfunction selectionSort(arr) {\r\n    const swap = (arr, idx1, idx2) =>\r\n        ([arr[idx1], arr[idx2]] = [arr[idx2], arr[idx1]]);\r\n\r\n    for (let i = 0; i < arr.length; i++) {\r\n        let currentMin = i;\r\n        for (let j = i + 1; j < arr.length; j++) {\r\n            if (arr[currentMin] > arr[j]) {\r\n                currentMin = j;\r\n            }\r\n        }\r\n        if (i !== currentMin) swap(arr, i, currentMin);\r\n    }\r\n\r\n    return arr;\r\n}\r\n// ALTERNATE SELECTION SORT\r\nfunction selectionSort2(arr){\r\nlet arrSize = arr.length;\r\n    let currentMin;\r\nfor (i=0; i < arrSize; i++){\r\n//set minimum to this position\r\n        currentMin = i;\r\n//check the rest of the array to see if anything is smaller\r\n        for (j=i+1; j < arrSize; j++){\r\n            if (arr[j] < arr[currentMin]){\r\n                currentMin = j;\r\n            }\r\n        }\r\n//if the minimum isn't in the position, swap it\r\n        if (i != currentMin){\r\n               var temp = yourArray[i];\r\n                yourArray[i] = yourArray[currentMin];\r\n                yourArray[currentMin] = temp;\r\n        }\r\n    }\r\nreturn arr;\r\n}\r\n\r\n\r\nlet arraySelectionSort = [0, 2, 34, 22, 2, 1, 9, 76, 4, 10, 19, 17]\r\nconsole.log('Unsorted: '+ arraySelectionSort);\r\n\r\nnewSelectionSort = selectionSort(arraySelectionSort);\r\nconsole.log('Selection Sort: '+ newSelectionSort);\r\nnewSelectionSort2 = selectionSort2(arraySelectionSort);\r\nconsole.log('Selection Sort 2: '+ newSelectionSort2);\r\n \r\n\r\n// INSERTION\r\nfunction insertionSort(arr){\r\n\tvar currentVal;\r\n    for(var i = 1; i < arr.length; i++){\r\n        currentVal = arr[i];\r\n        for(var j = i - 1; j >= 0 && arr[j] > currentVal; j--) {\r\n            arr[j+1] = arr[j]\r\n        }\r\n        arr[j+1] = currentVal;\r\n    }\r\n    return arr;\r\n}\r\n\r\nlet arrayInsertionSort = [0, 2, 34, 22, 2, 1, 9, 76, 4, 10, 19, 17]\r\nconsole.log('Unsorted: '+ arrayInsertionSort)\r\nnewInsertionSort = insertionSort(arrayInsertionSort) \r\nconsole.log('Insertion Sort: '+ newInsertionSort);\r\n\r\n\r\n// BUBBLE SORT (UNOPTIMIZED) \r\n// function bubbleSort(arr) {\r\n//     for (var i = arr.length; i > 0; i--) {\r\n//         for (var j = 0; j < i - 1; j++) {\r\n//             console.log(arr, arr[j], arr[j + 1]);\r\n//             if (arr[j] > arr[j + 1]) {\r\n//                 var temp = arr[j];\r\n//                 arr[j] = arr[j + 1];\r\n//                 arr[j + 1] = temp;\r\n//             }\r\n//         }\r\n//     }\r\n//     return arr;\r\n// } \r\n// ES2015  \r\nfunction bubbleSort(arr) {\r\n    const swap = (arr, idx1, idx2) => {\r\n        [arr[idx1], arr[idx2]] = [arr[idx2], arr[idx1]];\r\n    };\r\n\r\n    for (let i = arr.length; i > 0; i--) {\r\n        for (let j = 0; j < i - 1; j++) {\r\n            if (arr[j] > arr[j + 1]) {\r\n                swap(arr, j, j + 1);\r\n            }\r\n        }\r\n    }\r\n    return arr;\r\n}\r\n \r\nlet arrayUnsorted  = [0, 2, 34, 22, 2, 1, 9, 76, 4, 10, 19, 17]\r\nconsole.log('Unsorted: '+ arrayUnsorted)\r\nnewBubbleSort = bubbleSort(arrayUnsorted) \r\nconsole.log('Bubble Sort: '+ newBubbleSort);\r\n\r\n\r\n\r\n// BUBBLE SORT (OPTIMIZED) with noSwaps\r\nfunction bubbleSortOptimize(arr){\r\n  var noSwaps;\r\n  for(var i = arr.length; i > 0; i--){\r\n    noSwaps = true;\r\n    for(var j = 0; j < i - 1; j++){\r\n      if(arr[j] > arr[j+1]){\r\n        var temp = arr[j];\r\n        arr[j] = arr[j+1];\r\n        arr[j+1] = temp;\r\n        noSwaps = false;         \r\n      }\r\n    }\r\n    if(noSwaps) break;\r\n  }\r\n  return arr;\r\n} \r\nlet arrayUnsorted2  = [0, 2, 34, 22, 2, 1, 9, 76, 4, 10, 19, 17]\r\nconsole.log('Unsorted: '+ arrayUnsorted2)\r\nnewBubbleSort = bubbleSortOptimize(arrayUnsorted2) \r\nconsole.log('Bubble Sort (Optimized): '+ newBubbleSort);\r\n"]}